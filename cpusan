#!/bin/bash
################################################################################
#                           The MIT License (MIT)                              #
#                     Copyright (c) 2016 Jean-Yves VET                         #
#                                                                              #
# Permission is hereby granted, free of charge, to any person obtaining a copy #
# of this software and associated documentation files (the "Software"), to     #
# deal in the Software without restriction, including without limitation the   #
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or  #
# sell copies of the Software, and to permit persons to whom the Software is   #
# furnished to do so, subject to the following conditions:                     #
#                                                                              #
# The above copyright notice and this permission notice shall be included in   #
# all copies or substantial portions of the Software.                          #
#                                                                              #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR   #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,     #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER       #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING      #
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS #
# IN THE SOFTWARE.                                                             #
#        _____ ______ _   _      _____             _ _   _                     #
#       /  __ \| ___ \ | | |    /  ___|           (_) | (_)                    #
#       | /  \/| |_/ / | | |    \ `--.  __ _ _ __  _| |_ _ _______ _ __        #
#       | |    |  __/| | | |     `--. \/ _` | '_ \| | __| |_  / _ \ '__|       #
#       | \__/\| |   | |_| |    /\__/ / (_| | | | | | |_| |/ /  __/ |          #
#        \____/\_|    \___/     \____/ \__,_|_| |_|_|\__|_/___\___|_|          #
#                                                                              #
####----[ FULL USAGE ]------------------------------------------------------####
#% Synopsis:                                                                   #
#+    {{SC_NAME}} [options...]                                                 #
#%                                                                             #
#% Description:                                                                #
#%    Sanitize cores from activity. Temporaraly migrate processes and threads  #
#%    on core 0. Might be used to run tests and benchmarks with less           #
#%    perturbations.                                                           #
#%                                                                             #
#% Options:                                                                    #
#%    -c, --coreset=<list>             Core set list (default: {{CORESET}}).   #
#%        --disable-colors             Disable colors.                         #
#%        --enable-colors, --colors    Enable colors.                          #
#%    -e, --exclude=<list>             PIDs and process names to ignore.       #
#%    -h, --help                       Print this help.                        #
#%    -k, --kernel                     Migrate kernel processes as well.       #
#%    -s, --silent                     Do not print anything.                  #
#%    -v, -vv, -vvv                    Verbosity.                              #
#%        --version                    Print script information.               #
#%                                                                             #
#% Examples:                                                                   #
#%    Use in root to migrate all processes on core {{CORESET}}                 #
#%    sudo {{SC_NAME}}                                                         #
#%                                                                             #
#%    Use in root to migrate all processes on core 0 and 8                     #
#%    sudo {{SC_NAME}} -c 0,8                                                  #
#%                                                                             #
#%    Migrate all processes on core {{CORESET}}, except process hpl and PID 42 #
#%    sudo {{SC_NAME}} -e hpl,42                                               #
#%                                                                             #
#%    Use with color support                                                   #
#%    sudo {{SC_NAME}} --colors                                                #
#%                                                                             #
####----[ INFORMATION ]-----------------------------------------------------####
#% Implementation:                                                             #
#-    version         0.3                                                      #
#-    url             https://github.com/jyvet/cpusanitizer                    #
#-    author          Jean-Yves VET <contact[at]jean-yves.vet>                 #
#-    copyright       Copyright (c) 2016                                       #
#-    license         MIT                                                      #
##################################HEADER_END####################################


####----[ PARAMETERS ]------------------------------------------------------####

    ENABLE_COLORS='false'       # Disable colors by default
    ENABLE_KERNEL='false'       # Disable kernel processes migration by default
    CORESET='0'                 # Migrate to core 0 by default
    EXCLUDE='1'                 # Exclude the init process by default


####----[ GLOBAL VARIABLES ]------------------------------------------------####

    readonly SC_HSIZE=$(head -n99 "${0}" | grep -m1 -n "#HEADER_END#" |
                        cut -f1 -d:)     # Compute header size
    readonly SC_DIR=$(cd "$( dirname "${BASH_SOURCE[0]}" )" &&
                        pwd)             # Retrieve path where script is located
    readonly SC_NAME=$(basename ${0})    # Retrieve name of the script
    readonly SC_PID=$(echo $$)           # Retrieve PID of the script
    declare -A AFFINITIES                # Store coreset affinities
    declare -A PROCESSES                 # Store names of all processes


####----[ ERRORS ]----------------------------------------------------------####

    # Generate error codes (emulate enum)
    ECODES=(OK ERROR ENAN EINVOPT ECMD EINVNUM)
    for i in $(seq 0 $((${#ECODES[@]} -1 ))); do
        declare -r ${ECODES[$(($i))]}=$i;
    done

    # Register error messages
    ERRORS[$EINVOPT]='invalid option'
    ERRORS[$ENAN]='not a number'
    ERRORS[$ECMD]='$CMD not found. Please install the $PACKAGE package'
    ERRORS[$EINVNUM]='invalid number of arguments'


####----[ WARNINGS ]--------------------------------------------------------####

    # Register warning messages
    declare -A WARNINGS
    WARNINGS['not_root']='not root, only processes own by user will be moved'


####----[ GENERIC FUNCTIONS ]-----------------------------------------------####

    ############################################################################
    # Check if argument is a number.                                           #
    # Args:                                                                    #
    #      -$1: Argument to check.                                             #
    # Result: return 0 if a number, else -1.                                   #
    is_numeric()
    {
       # Check number of input arguments
        if [[ "$#" -ne 1 ]]; then
            print_error $EINVNUM; return $?
        fi

        # Extract argument
        local in="$1"

        # Check if a number
        local regex='^[0-9]+$'
        if [[ "$in" =~ $regex ]]; then
            return 0
        else
            return -1
        fi
    }

    ############################################################################
    # Replace tags with content of variables.                                  #
    # Args:                                                                    #
    #      -$1: Input text.                                                    #
    #      -$2: Output variable where to store the resulting text.             #
    #      -$3: Start of the tag.                                              #
    #      -$4: End of the tag.                                                #
    # Result: store the resulting text in the variable defined by $2.          #
    tags_replace()
    {
        # Check number of input arguments
        if [[ "$#" -ne 4 ]]; then
            print_error $EINVNUM; return $?
        fi

        # Extract arguments
        local in="$1"
        local out="$2"
        local stag="$3"
        local etag="$4"

        # Search list of tags to replace
        local varList=$(echo "$in" | egrep -o "$stag[0-9A-Za-z_-]*$etag" |
                        sort -u | sed -e "s/^$stag//" -e "s/$etag$//")

        local res="$in"

        # Check if there are some tags to replace
        if [[ -n "$varList" ]]; then
            # Generate sed remplacement string
            sedOpts=''
            for var in $varList; do
                eval "value=\${${var}}"
                sedOpts="${sedOpts} -e 's#$stag${var}$etag#${value}#g'"
            done

            res=$(eval "echo -e \"\$in\" | sed $sedOpts")
        fi

        # Store resulting string in the output variable
        eval "$out=\"$res\""
    }

    ############################################################################
    # Remove all tags contained in a text.                                     #
    # Args:                                                                    #
    #      -$1: Input text.                                                    #
    #      -$2: Output variable where to store the resulting text.             #
    #      -$3: Start of the tag.                                              #
    #      -$4: End of the tag.                                                #
    # Result: store the resulting text in the variable defined by $2.          #
    tags_remove()
    {
        # Check number of input arguments
        if [[ "$#" -ne 4 ]]; then
            print_error $EINVNUM; return $?
        fi

        # Extract arguments
        local in="$1"
        local out="$2"
        local stag="$3"
        local etag="$4"

        # Remove tags
        local res="$(echo "$in" | sed -e "s#$stag[A-Za-z0-9_]*$etag##g")"

        # Store resulting string in the output variable
        eval "$out=\"$res\""
    }

    ############################################################################
    # Replace tags in a text with the content of variables.                    #
    # Args:                                                                    #
    #      -$1: Input text.                                                    #
    #      -$2: Output variable where to store the resulting text or output    #
    #           the content. ($2='var_name', $2='stdout' or $2='stderr')       #
    # Result: store or output the resulting text.                              #
    tags_replace_txt()
    {
        # Check number of input arguments
        if [[ "$#" -ne 2 ]]; then
            print_error $EINVNUM; return $?
        fi

        # Extract arguments
        local in="$1"
        local out="$2"

        # Replace all tags defined by {{TAG_NAME}}
        tags_replace "$in" "$out" '{{' '}}'

        # Check if the resulting string has to be printed in stderr or stdout
        case "$out" in
            stdout)
                eval "echo -e \"\$$out\""
                ;;
            stderr)
                eval "echo -e \"\$$out\"" 1>&2
                ;;
        esac
    }

    ############################################################################
    # Enable colors and check color depth.                                     #
    # Args:                                                                    #
    #       None                                                               #
    # Result: set global variable if color support may be turned on.           #
    enable_colors()
    {
        ENABLE_COLORS='false'

        check_cmd 'tput' 'ncurses'

        # Check if tput available for colors management
        if [[ "$?" -eq 0 ]]; then
            # Check if launched in a terminal
            if [[ -t 1 ]]; then
                local color_depth=$(tput colors)

                # Check color depth
                if [[ "$color_depth" -ge 8 ]] 2>/dev/null; then
                    print_verbose 3 'color support turned on'
                    ENABLE_COLORS='true'

                    if [[ "$color_depth" -lt 256 ]] 2>/dev/null; then
                        print_verbose 2 'color depth less than 256 (using 8)'
                    fi
                else
                    print_verbose 2 'color depth less than 8, color disabled'
                fi
            else # Not run in a terminal, turn off color support
                print_verbose 2 'not run in a terminal, color disbaled'
            fi
        else # tput not vailable, turn off color support
            print_verbose 2 'colors support turned off'
        fi
    }

    ############################################################################
    # Print text with colors if colors are enables.                            #
    # Args:                                                                    #
    #      -$1: Input text.                                                    #
    #      -$*: Other arguments for printf function.                           #
    # Result: print resulting string in stdout.                                #
    print_colors()
    {
        # Check number of input arguments
        if [[ "$#" -lt 1 ]]; then
            print_error $EINVNUM; return $?
        fi

        # Extract argument
        local in="$1<normal>"

        # Shift arguments
        shift

        # Check if colors are enabled and prepare output string
        if [[ "$ENABLE_COLORS" == "true" ]]; then
            # End tags
            local normal='$(tput sgr0)'
            local black="$normal"
            local red="$normal"
            local green="$normal"
            local grey1="$normal"
            local grey2="$normal"
            local grey3="$normal"
            local yellow="$normal"
            local blue="$normal"
            local magenta="$normal"
            local cyan="$normal"
            local white="$normal"
            local orange="$normal"
            local b="$normal"
            local i='$(tput ritm)'
            local u='$(tput rmul)'
            tags_replace "$in" 'OUT' '<\/' '>'

            # Start tags
            if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
                yellow='$(tput setaf 190)'
                orange='$(tput setaf 172)'
                grey1='$(tput setaf 240)'
                grey2='$(tput setaf 239)'
                grey3='$(tput setaf 238)'
            else
                yellow='$(tput setaf 3)'
                orange='$(tput setaf 3)'
                grey1='$(tput setaf 0)'
                grey2='$(tput setaf 0)'
                grey3='$(tput setaf 0)'
            fi

            black='$(tput setaf 0)'
            red='$(tput setaf 1)'
            green='$(tput setaf 2)'
            blue='$(tput setaf 4)'
            magenta='$(tput setaf 5)'
            cyan='$(tput setaf 6)'
            white='$(tput setaf 7)'
            b='$(tput bold)'
            i='$(tput sitm)'
            u='$(tput smul)'
            tags_replace "$OUT" 'OUT' '<' '>'
        else
            tags_remove "$in" 'OUT' '</' '>'
            tags_remove "$OUT" 'OUT' '<' '>'
        fi

        # Print string to stdout
        printf "$OUT" $*
    }

    ############################################################################
    # Print error in stderr.                                                   #
    # Args:                                                                    #
    #      -$1: Error code.                                                    #
    # Result: print error and return error code.                               #
    print_error()
    {
        # Extract argument
        local error_code="$1"

        # Check if output is not muted
        if [[ -z "$SILENT" ]]; then
            # Get error description
            eval "msg=\"${ERRORS[${error_code}]}\""

            # Print the error message
            print_colors '<red><b>Error:</b> </red>' 1>&2
            print_colors "<red>$msg</red>\n"         1>&2
        fi

        # Return the corresponding error code
        return "-$error_code"
    }

    ############################################################################
    # Print warning in stderr.                                                 #
    # Args:                                                                    #
    #      -$1: Warning code.                                                  #
    # Result: print warning.                                                   #
    print_warning()
    {
        # Check if output is not muted
        if [[ -z "$SILENT" ]]; then
            # Extract argument
            local warning_code="$1"

            # Get warning description
            eval "msg=\"${WARNINGS[${warning_code}]}\""

            # Print the warning message
            print_colors '<orange><b>Warning:</b> </orange>' 1>&2
            print_colors "<orange>$msg</orange>\n"           1>&2
        fi
    }

    ############################################################################
    # Print info in stdout.                                                    #
    # Args:                                                                    #
    #      -$1: message to print.                                              #
    #      -$*: printf arguments.                                              #
    # Result: print info message.                                              #
    print_info()
    {
        # Check if output is not muted
        if [[ -z "$SILENT" ]]; then
            # Extract argument
            local msg="$1"

            # Shift arguments
            shift

            # Print the message
            print_colors '<yellow><b>Info:</b> </yellow>'
            print_colors "<yellow>$msg</yellow>\n" $*
        fi
    }

    ############################################################################
    # Print verbose info in stdout.                                            #
    # Args:                                                                    #
    #      -$1: verbosity (1, 2 or 3).                                         #
    #      -$2: message to print.                                              #
    #      -$*: printf arguments.                                              #
    # Result: print info in verbose mod.                                       #
    print_verbose()
    {
        # Check if output is not muted
        if [[ -z "$SILENT" ]]; then
            # Extract argument
            local level="$1"
            local msg="$2"

            # Shift arguments
            shift; shift

            # Check the verbosity level currently set
            if [[ "$VERBOSE_LEVEL" -ge "$level" ]]; then
                # Select color
                local color="white"
                case "$level" in
                    1)  color="grey1";;
                    2)  color="grey2";;
                    3)  color="grey3";;
                esac

                # Print the warning message
                print_colors "<$color><b>Verbose $level:</b> </$color>"
                print_colors "<$color>$msg</$color>\n" $*
            fi
        fi
    }

    ############################################################################
    # Print usage.                                                             #
    # Args:                                                                    #
    #       None                                                               #
    # Result: print short usage message.                                       #
    usage()
    {
        print_colors '<b>Usage:</b> '
        local tmp=$(head -n${SC_HSIZE:-99} "${0}" | grep -e "^#+" |
                   sed -e "s/^#+[ ]*//g" -e "s/#$//g")

        tags_replace_txt "$tmp" 'stdout'
    }

    ############################################################################
    # Print information related to development.                                #
    # Args:                                                                    #
    #       None                                                               #
    # Result: print version and contact information.                           #
    info()
    {
        local tmp=$(head -n${SC_HSIZE:-99} "${0}" | grep -e "^#-" |
                        sed -e "s/^#-//g" -e "s/#$//g" -e "s/\[at\]/@/g")

        tags_replace_txt "$tmp" 'stdout'
    }

    ############################################################################
    # Print full detailled usage.                                              #
    # Args:                                                                    #
    #       None                                                               #
    # Result: print help.                                                      #
    usage_full()
    {
        local tmp=$(head -n${SC_HSIZE:-99} "${0}" | grep -e "^#[%+]" |
                       sed -e "s/^#[%+-]//g" -e "s/#$//g")

        tags_replace_txt "$tmp" 'stdout'

        info
    }

    ############################################################################
    # Check if the current user is root.                                       #
    # Args:                                                                    #
    #       None                                                               #
    # Result: set global variable IS_ROOT.                                     #
    is_root()
    {
        if [[ 'root' != "$( whoami )" ]]; then
            IS_ROOT='false'
            print_warning 'not_root'
        else
            IS_ROOT='true'
        fi
    }

    ############################################################################
    # Check arguments.                                                         #
    # Args:                                                                    #
    #       All arguments provided.                                            #
    # Result: check if arguments are allowed and set global variables.         #
    check_arguments()
    {
        # Retireve verbosity arguments first
        local ttargs=''
        for arg in $*; do
            case "$arg" in
                -s)                SILENT='true';;
                --silent)          SILENT='true';;
                -v)                VERBOSE_LEVEL=1;;
                -vv)               VERBOSE_LEVEL=2;;
                -vvv)              VERBOSE_LEVEL=3;;
                *) [[ "${arg:0:1}" == '-' ]] || delim="\""
                    ttargs="${ttargs}${delim}${arg}${delim} ";;
            esac
        done

        # Retireve color arguments
        local targs=''
        for arg in $ttargs; do
            case "$arg" in
                --colors)          enable_colors;;
                --disable-colors)  ENABLE_COLORS='false';;
                --enable-colors)   enable_colors;;
                *) [[ "${arg:0:1}" == '-' ]] || delim="\""
                   targs="${targs}${delim}${arg}${delim} ";;
            esac
        done

        # Translate arguments to short options
        local args=''
        for arg in $targs; do
            case "$arg" in
                --coreset=*)       args="${args}-c $(echo "$arg" |
                                        sed 's/--.*=//g') ";;
                --exclude=*)       args="${args}-e $(echo "$arg" |
                                        sed 's/--.*=//g') ";;
                --help)            args="${args}-h ";;
                --kernel)          args="${args}-k ";;
                --version)         info; exit 0;;
                *) [[ "${arg:0:1}" == '-' ]] || delim="\""
                    args="${args}${delim}${arg}${delim} ";;
            esac
        done

        # Reset the positional parameters to the short options
        eval set -- $args

        # Available options
        local options='c:e:hk'

        # Desactivate error handling by getops
        OPTERR=0

        # Parse arguments
        while getopts $options OPT; do
            case "$OPT" in
                c)  CORESET=$OPTARG;;
                e)  EXCLUDE="$EXCLUDE,$OPTARG";;
                h)  usage_full; exit 0;;
                k)  ENABLE_KERNEL='true'
                    print_verbose 3 'enabling kernel processes migration'
                    ;;
                \?) print_error $EINVOPT; usage; return $EINVOPT;;
            esac
        done
    }

    ############################################################################
    # Check if the tool is installed and the command is working on the system. #
    # Args:                                                                    #
    #       -$1: command to check.                                             #
    #       -$2: package name.                                                 #
    # Result: display an error and return error code ECMD if not installed.    #
    check_cmd()
    {
        # Check number of input arguments
        if [[ "$#" -ne 2 ]]; then
            print_error $EINVNUM; return $?
        fi

        # Extract parameters
        local cmd="$1"
        local package="$2"

        # Check if command works
        command -v $cmd >/dev/null 2>&1 ||
        {
            # Set variables for error message
            CMD=$cmd
            PACKAGE=$package

            # Print error message and return error code
            print_error $ECMD;
            return $?
        }

        print_verbose 3 "command %s available" "$cmd"

        return $OK
    }


####----[ FUNCTIONS ]-------------------------------------------------------####

    ############################################################################
    # Check if all dependencies are satisfied.                                 #
    # Args:                                                                    #
    #       None                                                               #
    # Result: return error code if one package is missing.                     #
    check_dependencies()
    {
        local res=$OK

        # Check taskset for processes migration
        check_cmd 'taskset' 'taskset' || res=$?

        return $res
    }

    ############################################################################
    # Check the process with the given PID is still active.                    #
    # Args:                                                                    #
    #       -$1: command to check.                                             #
    # Result: return error if the process is not running.                      #
    pid_is_active()
    {
        # Check number of input arguments
        if [[ "$#" -ne 1 ]]; then
            print_error $EINVNUM; return $?
        fi

        # Extract argument
        local pid="$1"

        # Retrieve current list of pids
        local all_pids=$(ps haxo pid,cmd | sed 's/^ *//g' | cut -f1 -d' ')

        # Check if pid is in the list
        echo -e "$all_pids" | grep -o "^$pid$" > /dev/null 2>&1

        return $?
    }

    ############################################################################
    # Count PIDs in the list.                                                  #
    # Args:                                                                    #
    #       None                                                               #
    # Result: update NB_PIDS variable.                                         #
    pids_count()
    {
        if [[ -n "$PIDS" ]]; then
            NB_PIDS=$(echo "$PIDS" | wc -w)
        fi
    }

    ############################################################################
    # Refresh list of PIDs.                                                    #
    # Args:                                                                    #
    #       None                                                               #
    # Result: remove from the list PIDs which are not active anymore.          #
    pids_refresh()
    {
        if [[ -n "$PIDS" ]]; then
            local pids=''

            for i in $PIDS; do
                # Check if the process is still active
                pid_is_active "$i"
                if [[ "$?" -eq 0 ]]; then
                    pids="$pids $i"
                else
                    # Clean affinity entry
                    if [[ -n "${AFFINITIES[$i]}" ]]; then
                        unset AFFINITIES[$i]
                    fi

                    print_verbose 2 'PID %d (%s) is not active anymore' "$i" \
                                  "${PROCESSES[$i]}"

                    # Clean process name entry
                    if [[ -n "${PROCESSES[$i]}" ]]; then
                        unset PROCESSES[$i]
                    fi
                fi
            done

            # Remove unaccessible PIDs from the list
            PIDS="$pids"

            # Count PIDs
            pids_count
        fi
    }

    ############################################################################
    # Get a list of active PIDs.                                               #
    # Args:                                                                    #
    #       None                                                               #
    # Result: get the list in the PIDS global variable, update count.          #
    pids_retrieve()
    {
        local exclude=''

        # Check if all PIDs should be migrated
        if [[ "$IS_ROOT" == 'true' ]]; then
            if [[ "$ENABLE_KERNEL" == 'true' ]]; then
                PS=$(ps haxo pid,cmd)
                exclude='ps haxo pid,cmd'
            else
                PS=$(ps hao pid,cmd --ppid 2 -p 2 --deselect)
                exclude='ps hao pid,cmd'
            fi
        else
            PS=$(ps hao pid,cmd)
            exclude='ps hao pid,cmd'
        fi

        # Build exclude list from exclude argument
        local tmp=$(echo "$EXCLUDE" | sed 's/,/ /g')
        for i in $tmp; do
            is_numeric $i
            if [[ $? == 0 ]]; then
                exclude="$exclude\|^$i "
                print_verbose 2 "exclude PID $i"
            else
                exclude="$exclude\|$i"
                print_verbose 2 "exclude process name '$i'"
            fi
        done

        # Filter PIDs with the exclude list
        PS=$(echo -e "$PS" | sed -e 's/^ *//g' -e 's/ +/ /g' |
             grep -v "$exclude")

        # Get a list of PIDs
        PIDS=$(echo -e "$PS" | cut -f1 -d" " | xargs)

        # Keep track of process names
        if [[ -n "$PIDS" ]]; then
            for i in $PIDS; do
                PROCESSES["$i"]=$(echo -e "$PS" | grep -e "^$i " |
                                  cut -f2 -d' ')
            done
        fi

        # Count PIDs
        pids_count
    }

    ############################################################################
    # Backup coremask affinity of each PID.                                    #
    # Args:                                                                    #
    #       None                                                               #
    # Result: backup in AFFINITIES global variable and update PIDs list.       #
    pids_backup_affinities()
    {
        local pids=""
        local count=0

        # Check if the list of PIDs is not empty
        if [[ -n "$PIDS" ]]; then
            # Check if PID still active and backup affinity
            for i in $PIDS; do
                local pid=$(taskset -p $i 2>/dev/null)
                if [[ "$?" -eq 0 ]]; then
                    AFFINITIES["$i"]=$(echo $pid | sed 's/ //g' | cut -f2 -d':')
                    pids="$pids $i"
                fi
            done

            # Remove unaccessible PIDs from the list
            PIDS="$pids"

            # Count PIDs
            pids_count
        fi
    }

    ############################################################################
    # Migrate processes and threads.                                           #
    # Args:                                                                    #
    #       None                                                               #
    # Result: move processes and their threads to core 0.                      #
    pids_migrate()
    {
        # Migrate all processes in the PIDS list
        for i in $PIDS; do
            print_verbose 1 'migrating PID %d (%s)' "$i" "${PROCESSES[$i]}"

            taskset -a -pc $CORESET $i > /dev/null 2>&1
        done

        print_info 'temporarly migrated %d processes on core set %s' \
                   $NB_PIDS $CORESET
    }

    ############################################################################
    # Move back processes and threads to their previous coremask affinity.     #
    # Args:                                                                    #
    #       None                                                               #
    # Result: restore affinities.                                              #
    pids_restore()
    {
        # Refresh list of PIDS and check if they are still active
        pids_refresh

        # Restore affinity of each PID which is still active
        for i in $PIDS; do
            if [[ -n "${AFFINITIES[$i]}" ]]; then
                print_verbose 1 'restoring affinity (%s) for PID %d (%s)' \
                              "${AFFINITIES[$i]}" "$i" "${PROCESSES[$i]}"

                taskset -a -p ${AFFINITIES[$i]} $i > /dev/null 2>&1
            fi
        done

        print_info 'restored affinity of %d processes' $NB_PIDS
    }

    ############################################################################
    # Keep the script active.                                                  #
    # Args:                                                                    #
    #       None                                                               #
    # Result: loop until the script is explicitely exited.                     #
    wait_exit()
    {
        while :
        do
            sleep 100
        done

        exit 0
    }


####----[ MAIN ]------------------------------------------------------------####

if [[ -z "$SPASS_ENABLE_TESTS" ]]; then  # Disable main if unit testing
    # Retrive and check all provided arguments
    check_arguments $* || exit $?

    # Check if necessary packages are available
    check_dependencies || exit $?

    # Check if run as root
    is_root

    # Retrieve list of PIDs
    pids_retrieve

    # Keep track of previous affinity
    pids_backup_affinities

    # Trap to restore PIDs on exit
    trap pids_restore EXIT

    # Migrate PIDs
    pids_migrate

    # Keep migration active until exit
    wait_exit
fi
